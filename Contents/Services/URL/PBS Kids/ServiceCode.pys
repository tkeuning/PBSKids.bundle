import urllib2
import ssl

JSON_URL = 'https://pbskids.org/pbsk/video/api/getVideos/?guid='

####################################################################################################
def MetadataObjectForURL(url):

    details = GetJSON(url)

    title = details['title']
    summary = details['description']

    try: duration = details['duration']
    except: duration = None

    thumb = ''
    images = ['kids-mezzannine-16x9', 'originalres_16x9', 'kids-mezzannine-4x3', 'originalres_4x3']

    for img in images:
        if img in details['images'] and 'url' in details['images'][img] and details['images'][img]['url']:
            thumb = details['images'][img]['url']
            break

    if details['type'] =='Clip':
        return VideoClipObject(
            title = title,
            summary = summary,
            thumb = Resource.ContentsOfURLWithFallback(thumb)
        )
    else:
        if details['show'] is not None:
            show_title = details['show']['attributes']['title']
        else:
            show_title = details['parent_tree']['attributes']['title']
        return EpisodeObject(
            title = title,
            show = show_title,
            summary = summary,
            thumb = Resource.ContentsOfURLWithFallback(thumb)
        )

####################################################################################################
def MediaObjectsForURL(url):
    return [
        MediaObject(
            video_codec = VideoCodec.H264,
            audio_codec = AudioCodec.AAC,
            protocol = 'hls',
            parts = [PartObject(key=Callback(PlayVideo, url=url))],
        )
    ]

####################################################################################################
@indirect
def PlayVideo(url):

    details = GetJSON(url)
    vid_profiles = {vid['profile']:vid['url'] for vid in details['videos']}
    preferred_profile_list = ['hls-16x9-1080p',
                              'hls-16x9-720p',
                              'hls-1080p-16x9',
                              'hls-2500k-16x9',
                              'ipad-16x9',
                              'iphone-16x9',
                              'hls-2500k-4x3',
                              'ipad-4x3',
                              'iphone-4x3']
    for profile_name in preferred_profile_list:
        if profile_name in vid_profiles:
            selected_profile=profile_name
            break
    try:    redirect_url = vid_profiles[selected_profile] 
    except: redirect_url = details['videos'][0]['url']
    req = urllib2.Request(redirect_url + '?format=json')
    ssl_context = ssl.SSLContext(ssl.PROTOCOL_TLSv1)
    data = urllib2.urlopen(req, context=ssl_context).read()
    json = JSON.ObjectFromString(data)
    m3u8_url = json['url']
    # Force http for m3u8, https crashing
    # m3u8_url = m3u8_url.replace('https:','http:')
    return IndirectResponse(VideoClipObject, key=HTTPLiveStreamURL(url=m3u8_url))
    
####################################################################################################
def GetJSON(url):

    video_id = url.split('guid=')[1]
    req = urllib2.Request(JSON_URL + video_id)
    ssl_context = ssl.SSLContext(ssl.PROTOCOL_TLSv1)
    data = urllib2.urlopen(req, context=ssl_context).read()
    json = JSON.ObjectFromString(data)
    return json['items'][0]
